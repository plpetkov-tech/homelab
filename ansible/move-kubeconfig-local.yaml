---
- name: Move kubeconfig to user home
  hosts: controlplane[0]
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tags:
    - move_kubeconfig_remote
  tasks:
    - name: Validate cluster config structure
      ansible.builtin.assert:
        that:
          - cluster_config.ssh.ssh_user is defined
          - cluster_config.cluster_name is defined
          - cluster_config.kubeconfig_file_name is defined
          - cluster_config.networking.kube_vip.vip is defined
          - cluster_config.networking.kube_vip.vip_hostname is defined
        fail_msg: "cluster_config.json is missing required fields"

    - name: Ensure .kube exists in ssh users' account
      ansible.builtin.file:
        path: "/home/{{ cluster_config.ssh.ssh_user }}/.kube"
        state: directory
        mode: '0700'
        owner: "{{ cluster_config.ssh.ssh_user }}"
        group: "{{ cluster_config.ssh.ssh_user }}"
      become: false

    - name: Configure .kube/config files in user home
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ cluster_config.ssh.ssh_user }}/.kube/config"
        remote_src: yes
        owner: "{{ cluster_config.ssh.ssh_user }}"
        group: "{{ cluster_config.ssh.ssh_user }}"
        mode: '0600'  # More restrictive permissions for config file
      become: true

- name: Ensure ~/.kube exists locally
  hosts: localhost
  gather_facts: false
  tags:
    - move_kubeconfig_local
  tasks:
    - name: Ensure .kube exists in local user account
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.kube/"
        state: directory
        mode: '0700'

- name: Fetch Kubernetes config file to local machine
  hosts: controlplane[0]
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tags:
    - move_kubeconfig_local
  tasks:
    - name: Fetch Kube config from the first controlplane server
      ansible.builtin.fetch:
        src: "/home/{{ cluster_config.ssh.ssh_user }}/.kube/config"
        dest: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
        flat: yes
      become: false
      run_once: true
      register: fetch_result
      failed_when: false

    - name: Fail if kubeconfig fetch failed
      ansible.builtin.fail:
        msg: "Failed to fetch kubeconfig: {{ fetch_result.msg | default('Unknown error') }}"
      when: fetch_result.failed

- name: Run local kubectl commands and configure kubeconfig
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tags:
    - rename_kubeconfig_context
  tasks:
    - name: Check if the kubectl context needs renaming
      ansible.builtin.shell:
        cmd: kubectl config get-contexts -o name
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
      register: kubectl_contexts
      changed_when: false
      ignore_errors: yes

    - name: Replace kubernetes-admin username in kubeconfig
      ansible.builtin.replace:
        path: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
        regexp: "kubernetes-admin"
        replace: "{{ cluster_config.cluster_name }}-admin"

    - name: Check contexts after username replacement
      ansible.builtin.shell:
        cmd: kubectl config get-contexts -o name
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
      register: kubectl_contexts_after_replace
      changed_when: false

    - name: Debug contexts after replacement
      ansible.builtin.debug:
        msg: 
          - "Available contexts: {{ kubectl_contexts_after_replace.stdout_lines }}"
          - "Looking for: {{ cluster_config.cluster_name }}-admin@{{ cluster_config.cluster_name }}"
          - "Target context: {{ cluster_config.cluster_name }}"
          - "Source exists: {{ (cluster_config.cluster_name + '-admin@' + cluster_config.cluster_name) in kubectl_contexts_after_replace.stdout }}"
          - "Target exists: {{ cluster_config.cluster_name in kubectl_contexts_after_replace.stdout }}"

    - name: Rename kubectl context
      ansible.builtin.command:
        cmd: kubectl config rename-context {{ cluster_config.cluster_name }}-admin@{{ cluster_config.cluster_name }} {{ cluster_config.cluster_name }}
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
      when: "cluster_config.cluster_name + '-admin@' + cluster_config.cluster_name in kubectl_contexts_after_replace.stdout"
      ignore_errors: yes

    - name: Set the new API server address (adding brackets for IPv6)
      ansible.builtin.set_fact:
        new_vip: >-
          {{ '[' + cluster_config.networking.kube_vip.vip + ']' if cluster_config.networking.kube_vip.use_ipv6 | default(false) else cluster_config.networking.kube_vip.vip }}

    - name: Replace API server address in kubeconfig
      ansible.builtin.replace:
        path: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
        regexp: "{{ cluster_config.networking.kube_vip.vip_hostname }}"
        replace: "{{ new_vip }}"

    - name: Set the current context to the new cluster name
      ansible.builtin.command:
        cmd: kubectl config use-context {{ cluster_config.cluster_name }}
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
      register: set_context_result
      failed_when: set_context_result.rc != 0

    - name: "'kubectl get nodes' from machine running ansible to verify kubeconfig has been set up correctly"
      ansible.builtin.command:
        cmd: kubectl get nodes
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
      register: kubectl_output
      failed_when: false

    - name: Show kubectl get nodes output
      ansible.builtin.debug:
        var: kubectl_output.stdout_lines
      when: kubectl_output.rc == 0

    - name: Show kubectl error if command failed
      ansible.builtin.debug:
        msg: "kubectl get nodes failed: {{ kubectl_output.stderr }}"
      when: kubectl_output.rc != 0

- name: Ensure KUBECONFIG line is in shell profile
  hosts: localhost
  gather_facts: true  # Explicitly set to true since we use ansible_env
  tags:
    - configure_shell_profile
  tasks:
    - name: Determine if .bashrc or .zshrc exists
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - "{{ ansible_env.HOME }}/.bashrc"
        - "{{ ansible_env.HOME }}/.zshrc"
      register: profile_files

    - name: Set shell profile path with .zshrc priority
      ansible.builtin.set_fact:
        profile_path: "{{ ansible_env.HOME }}/.zshrc"
      when: profile_files.results[1].stat.exists

    - name: Fallback to .bashrc if .zshrc doesn't exist
      ansible.builtin.set_fact:
        profile_path: "{{ ansible_env.HOME }}/.bashrc"
      when: 
        - not profile_files.results[1].stat.exists
        - profile_files.results[0].stat.exists

    - name: Create .bashrc if no shell profile exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.bashrc"
        state: touch
        mode: '0644'
      when: profile_path is not defined

    - name: Set profile path to newly created .bashrc
      ansible.builtin.set_fact:
        profile_path: "{{ ansible_env.HOME }}/.bashrc"
      when: profile_path is not defined

    - name: Add KUBECONFIG line to shell profile if not present
      ansible.builtin.lineinfile:
        path: "{{ profile_path }}"
        line: "export KUBECONFIG=$(find ~/.kube \\( -name '*.yaml' -o -name '*.yml' \\) -print0 | xargs -0 echo | tr ' ' ':')"
        state: present
        insertafter: EOF
        create: yes
        mode: '0644'
      register: profile_update

    - name: Display message if KUBECONFIG line was added
      ansible.builtin.debug:
        msg: "KUBECONFIG line added to {{ profile_path }}"
      when: profile_update.changed

    - name: Display message if KUBECONFIG line was already present
      ansible.builtin.debug:
        msg: "KUBECONFIG line already exists in {{ profile_path }}"
      when: not profile_update.changed