---
- name: Setup Longhorn Storage Disks
  hosts: all
  gather_facts: true
  become: true
  vars:
    longhorn_nodes: "{{ lookup('file', 'tmp/{{ cluster_name }}/longhorn_nodes.json') | from_json }}"
    filesystem: "xfs"  # XFS is better for large storage volumes and Longhorn
  tasks:
    - name: Get node metadata for current host
      set_fact:
        current_node: "{{ longhorn_nodes.nodes_with_secondary_disks | selectattr('cluster_name', 'equalto', cluster_name) | selectattr('ipv4.vm_ip', 'equalto', ansible_default_ipv4.address) | first | default({}) }}"

    - name: Skip hosts without secondary disks
      meta: end_host
      when: current_node == {} or not current_node.has_secondary_disks

    - name: Process secondary disks
      block:
        - name: Check if disk exists
          stat:
            path: "{{ disk_item.device_path }}"
          register: disk_check

        - name: Fail if disk doesn't exist
          fail:
            msg: "Disk {{ disk_item.device_path }} not found on {{ inventory_hostname }}"
          when: not disk_check.stat.exists

        - name: Check if mount point already exists and is mounted
          stat:
            path: "{{ disk_item.mount_path }}"
          register: mount_point_check

        - name: Check if mount point is already in use by different device
          command: findmnt -n -o SOURCE {{ disk_item.mount_path }}
          register: existing_mount_source
          failed_when: false
          changed_when: false
          when: mount_point_check.stat.exists

        - name: Warn if mount point is used by different device
          debug:
            msg: |
              WARNING: Mount point {{ disk_item.mount_path }} is already mounted with device {{ existing_mount_source.stdout }}
              Expected device: {{ disk_item.device_path }}
              This may indicate a configuration conflict.
          when: 
            - mount_point_check.stat.exists
            - existing_mount_source.rc == 0
            - existing_mount_source.stdout != disk_item.device_path

        - name: Check if disk is already formatted
          ansible.builtin.command:
            cmd: blkid "{{ disk_item.device_path }}"
          register: filesystem_check
          failed_when: false
          changed_when: false

        - name: Format disk with filesystem (idempotent)
          filesystem:
            fstype: "{{ filesystem }}"
            dev: "{{ disk_item.device_path }}"
            force: no  # Only format if not already formatted
            opts: "{{ '-f -d agcount=32 -l size=256m -n ftype=1' if filesystem == 'xfs' else '-E lazy_itable_init=1,lazy_journal_init=1 -J size=128' }}"
          when: filesystem_check.rc != 0
          register: format_result

        - name: Create mount point directory
          file:
            path: "{{ disk_item.mount_path }}"
            state: directory
            mode: '0755'
            owner: root
            group: root

        - name: Get disk UUID
          ansible.builtin.command:
            cmd: blkid -s UUID -o value "{{ disk_item.device_path }}"
          register: uuid_result
          failed_when: false
          changed_when: false

        - name: Extract disk UUID
          set_fact:
            disk_uuid: "{{ uuid_result.stdout }}"
          when: uuid_result.rc == 0 and uuid_result.stdout != ""

        - name: Add disk to /etc/fstab (idempotent)
          mount:
            path: "{{ disk_item.mount_path }}"
            src: "UUID={{ disk_uuid }}"
            fstype: "{{ filesystem }}"
            opts: "{{ 'defaults,nofail,noatime,inode64,largeio,swalloc' if filesystem == 'xfs' else 'defaults,nofail,noatime' }}"
            state: present
          when: disk_uuid is defined

        - name: Mount the disk (idempotent)
          mount:
            path: "{{ disk_item.mount_path }}"
            src: "UUID={{ disk_uuid }}"
            fstype: "{{ filesystem }}"
            opts: "{{ 'defaults,nofail,noatime,inode64,largeio,swalloc' if filesystem == 'xfs' else 'defaults,nofail,noatime' }}"
            state: mounted
          when: disk_uuid is defined

        - name: Set proper permissions for Longhorn
          file:
            path: "{{ disk_item.mount_path }}"
            mode: '0755'
            owner: root
            group: root
            state: directory

        - name: Create Longhorn data directory
          file:
            path: "{{ disk_item.mount_path }}/longhorn-data"
            state: directory
            mode: '0755'
            owner: root
            group: root

        - name: Verify mount and get disk space
          setup:
            filter: ansible_mounts
          register: mount_facts

        - name: Display disk information
          debug:
            msg: |
              Longhorn disk setup status on {{ inventory_hostname }}:
              - Device: {{ disk_item.device_path }}
              - Mount point: {{ disk_item.mount_path }}
              - UUID: {{ disk_uuid | default('N/A') }}
              - Filesystem: {{ filesystem }}
              - Mount status: {{ 'mounted' if mount_facts.ansible_facts.ansible_mounts | selectattr('mount', 'equalto', disk_item.mount_path) | list | length > 0 else 'not mounted' }}
              - Ready for Longhorn storage
      loop: "{{ current_node.secondary_disks }}"
      loop_control:
        loop_var: disk_item

