apiVersion: v1
kind: Namespace
metadata:
  name: hoarder
  labels:
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/audit: privileged
    pod-security.kubernetes.io/warn: privileged
---
# ConfigMap for Hoarder configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: hoarder-config
  namespace: hoarder
data:
  NEXTAUTH_URL: "https://hoarder.dunde.live" # Domain with HTTPS since we're using TLS
  MEILI_ADDR: "http://meilisearch:7700"
  BROWSER_WEB_URL: "http://chrome:9222"
  OLLAMA_BASE_URL: "https://ollama.dunde.live"
  INFERENCE_TEXT_MODEL: "llama3.2" # Change this to your preferred Ollama model
  INFERENCE_IMAGE_MODEL: "llava" # Change this to your preferred Ollama model for images
  INFERENCE_CONTEXT_LENGTH: "4096"
  INFERENCE_LANG: "english"
  DATA_DIR: "/data"
---
# PVC for Hoarder data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hoarder-data
  namespace: hoarder
spec:
  storageClassName: longhorn
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# PVC for Meilisearch data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: meilisearch-data
  namespace: hoarder
spec:
  storageClassName: longhorn
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Deployment for Chrome headless browser
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chrome
  namespace: hoarder
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chrome
  template:
    metadata:
      labels:
        app: chrome
    spec:
      containers:
      - name: chrome
        image: gcr.io/zenika-hub/alpine-chrome@sha256:1a0046448e0bb6c275c88f86e01faf0de62b02ec8572901256ada0a8c08be23f # {"$imagepolicy": "flux-system:alpine-chrome"}
        args:
        - --no-sandbox
        - --disable-gpu
        - --disable-dev-shm-usage
        - --remote-debugging-address=0.0.0.0
        - --remote-debugging-port=9222
        - --hide-scrollbars
        ports:
        - containerPort: 9222
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
---
# Service for Chrome
apiVersion: v1
kind: Service
metadata:
  name: chrome
  namespace: hoarder
spec:
  selector:
    app: chrome
  ports:
  - port: 9222
    targetPort: 9222
---
# Deployment for Meilisearch
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meilisearch
  namespace: hoarder
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meilisearch
  template:
    metadata:
      labels:
        app: meilisearch
    spec:
      containers:
      - name: meilisearch
        image: docker.io/getmeili/meilisearch:v1.19.1@sha256:abab6e9054572fea9fd409cf0f4fe3b65f6c8e70cd0f213004592b6d0e9587ac # {"$imagepolicy": "flux-system:meilisearch"}
        ports:
        - containerPort: 7700
        env:
        - name: MEILI_NO_ANALYTICS
          value: "true"
        - name: MEILI_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: hoarder-secrets
              key: MEILI_MASTER_KEY
        volumeMounts:
        - name: meilisearch-data
          mountPath: /meili_data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: meilisearch-data
        persistentVolumeClaim:
          claimName: meilisearch-data
---
# Service for Meilisearch
apiVersion: v1
kind: Service
metadata:
  name: meilisearch
  namespace: hoarder
spec:
  selector:
    app: meilisearch
  ports:
  - port: 7700
    targetPort: 7700
---
# Deployment for Hoarder
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hoarder
  namespace: hoarder
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hoarder
  template:
    metadata:
      labels:
        app: hoarder
    spec:
      containers:
      - name: hoarder
        image: ghcr.io/hoarder-app/hoarder:0.26.0@sha256:f575a34ed3f8975225c156786442f177846126cf27d7fd37350f3af23c549d22 # {"$imagepolicy": "flux-system:hoarder"}
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: hoarder-config
        - secretRef:
            name: hoarder-secrets
        volumeMounts:
        - name: hoarder-data
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: hoarder-data
        persistentVolumeClaim:
          claimName: hoarder-data
---
# Service for Hoarder
apiVersion: v1
kind: Service
metadata:
  name: hoarder
  namespace: hoarder
spec:
  selector:
    app: hoarder
  ports:
  - port: 3000
    targetPort: 3000
